https://auth0.com/docs/tokens/id-token
https://medium.com/@ryanchenkie_40935/angular-authentication-using-the-http-client-and-http-interceptors-2f9d1540eb8
https://stackoverflow.com/questions/21978658/invalidating-json-web-tokens

OpenID Connect -> generates ID tokens
OAuth 2.0 -> generates access tokens

aes.service.ts
    -general app startup functions
    -creates http interceptors
    -runs auth procedures
    -establishes user model singleton

apps
https://apps.aquilon.com:8080/login.html
https://apps.aquilon.com:8080/aes/portal

api
https://apps.aquilon.com:8081/api/aes

APP LOGIN
-user provides username and password
-app request POST /api/aes/security/login with username and password
-server parses request
(if success)
-server generates jwt access-token with user's public data in public claims and uid in private claims
-server sets access-token expiry to 5 minutes
-server generates refresh-token
-server sets refresh-token expiry to 10 hours
-server generates x-xsrf-token
-server sets x-xsrf-token expiry to not expire
-server places access-token in cookie; set cookie httponly: false, secure: true (prod env only)
-server places refresh-token in cookie; set cookie httponly: true, secure: true (prod env only)
-server places x-xsrf-token in cookie; set cookie httponly: true, secure: true (prod env only)
-all three cookies should be session cookies so they are destroyed on browser close
-server sets http header key:value to 'x-xsrf-token':x-xsrf-token
-server returns 200; cookies and headers set
-server redirects to AES portal

(if !success)
-server returns 401

APP LOGOUT
-app requests GET /api/aes/security/logout
-request includes access-token, refresh-token, and x-xsrf-token cookies
-server parses request
(if access-token &&
    refresh-token &&
    x-xsrf-token (in header) && 
    x-xsrf-token (cookie) &&
    x-xsrf-token (header) === x-xsrf-token (cookie))
-server kills all traces of tokens (blacklists, revoked list, etc.)
-server updates user record (last logout date, etc.)
-server clears cookies for access-token, refresh-token, and x-xsrf-token
-server clears x-xsrf-token from header
(always)
-server returns 200
-app deletes user object if exists
-app redirects to login page

APP AUTH CHECK HTTP INTERCEPTOR
(if !access-token)
-APP LOGOUT

(if access-token)
(if access-token expired)
-APP REFRESH TOKEN

(if access-token !expired)
-return true

APP REFRESH TOKEN
-app requests GET /api/aes/security/token
-server parses request
(if !refresh-token ||
    refresh-token expired)
-server kills all traces of tokens (blacklists, revoked list, etc.)
-server updates user record (last logout date, etc.)
-server clears cookies for access-token, refresh-token, and x-xsrf-token
-server clears x-xsrf-token from header
-server returns 401
-app deletes user object if exists
-app redirects to login page

APP REQUEST USER DATA
-app requests /api/aes/users/

SCENARIOS
1. User wants to get his user data details (secured)
-app gets uid from user object
-app requests GET /api/aes/users/${uid}
-APP AUTH CHECK HTTP INTERCEPTOR
(if auth check)
-server parses request
(if access-token &&
    refresh-token &&
    x-xsrf-token (in header) && 
    x-xsrf-token (cookie) &&
    x-xsrf-token (header) === x-xsrf-token (cookie))
-server gets uid, verifies authorization for resource (backend logic)
(user verified)
-server returns 200 and user detail json

(user !verified)
-server returns 401

2. User forgets password
https://www.owasp.org/index.php/Forgot_Password_Cheat_Sheet
https://postmarkapp.com/guides/password-reset-email-best-practices

(initial approach)
-user provides email address
-app requests POST /api/aes/security/forgot-password
-server parses request
(if email &&
    user email in DB)
-server uses crypto library to generate a non-guessable random hash
-server sends email to email address provided
-email includes template, link with hash to reset password form
-user provides new password and confirm new password
-app requests POST /api/aes/security/reset-password
-server parses request

CHECK X-XSRF-TOKEN EXPIRATION
(if x-xsrf-token from header !match x-xsrf-token in the cookie)
-return 401

-app logs out user and redirects to login page
(if access-token expired)
-return 400
-app makes a request for a new access-token
-new access-token endpoint /api/aes/security/token
-the refresh and x-xsrf cookies are passed along with the request
-server evaluates refresh-token and x-xsrf-token