https://auth0.com/docs/tokens/id-token
https://medium.com/@ryanchenkie_40935/angular-authentication-using-the-http-client-and-http-interceptors-2f9d1540eb8


OpenID Connect -> generates ID tokens
OAuth 2.0 -> generates access tokens

ID tokens
-ID tokens are JWT and contain claims about the user
-all ID tokens must be verified and the user claims must also be validated
-should only be used by the application where the app ID matches the app ID in the ID token's claims
-if the app ID doesn't match here, you shouldn't trust the ID token
-ID tokens contain claims which store user-specific data
-data about the user is public-facing and should never contain secure data about the user
-some example data might be user id, name, email, profile picture link, organization name, etc
-if you do attach user id or server links regarding the user, it should be encrypted within the claim

Handling request
-both ID tokens and access tokens have an expiry
-when the access token expires, any API call that requires an access token will return a 401 (unauthorized)
-use an interceptor to interject the http response and check for server codes there
-this should be an http interceptor and should handle all of the main server codes
-a mechanism should also be put in place that handles the expiry date automatically

user logs in > gets token > token expires in 30 minutes > set observable in app with a 30 minute timer > subscribe to timer >
timer expires > auth.logout() > redirect to login

aes.service.ts
    -general app startup functions
    -creates http interceptors
    -runs auth procedures
    -establishes user model singleton

auth.service.ts
    -uses jwt token functions to validate and get claims (timers, user data, etc.)
    -logout()
    -isAuthenticated()

Token scenarios
user > logs in > refreshes browser
user > logs in > closes browser > opens browser to portal
user > logs in > deletes localstorage token
user > logs in > changes localstorage token
user > logs in > logs out
user > logs in > navs to a different site > navs back to portal
user > logs in > token timer expires
user > logs in > app idle timer expires


TOKEN STORAGE
-store token in cookie
-have server set cookie to HttpOnly and Secure: true (prevents XSS attacks and requires HTTPS)
-use samesite restriction (prevents CSRF attacks)
-have angular http injector set every request to pass the cookie in the header
